#-----------------------
#edit @test_app_threads variable to change the number of software threads 
#the application should run. This in general should match the number of processors in the system
@test_app_threads = 1
#@test_app_threads = 4

@simics_version=SIM_version()

@global ckptdir
@ckptdir = "/net/icfiler3/vol/units/parsa/parsacom/workloads/ckpts/"

$cpu_class = "ultrasparc-iii"
add-directory "%simics%"
add-directory `ckptdir` + "/flexus_test_app_v9/baseline/phase_000/simics"

if not defined create_network {$create_network = "yes"}
$disk_size = 8513945600

if `simics_version[7] == '2'` {
   # Simics 2 version
   
   # set up 1 processor with 256MB
   @boards = {0 : [[0, 1, 256]]}
   # set up 8 processors with 256MB
   #@boards = {0 : [[0, 4, 256], [1, 4, 0]]}

   @cpu_spaces = 1

   $os = "solaris8"
   add-directory "%simics%/home/sarek"
   run-command-file "sol8-run.simics"

} else {
   # Simics 3 version

   $os = "solaris10"
   $solaris_version = 10
   
   #edit $num_cpus variable to change the number of cpus in the system
   $num_cpus = 1
   #edit $megs_per_cpu variable to change the RAM memory associated with each processor (in MB)
   $megs_per_cpu = 512
   
   add-directory "%simics%/targets/serengeti"

#  run-command-file "abisko-common.simics" the following lines are the same as running abisko-common.simics
     
   run-command-file "serengeti-6800-system.include" #we have modified this file and moved it to the local directory
   instantiate-components
 
   $eth_comp = $pci_hme
   $eth_cnt = ""
   run-command-file "%simics%/targets/common/add-eth-link.include"
   run-command-file "%simics%/targets/serengeti/abisko-setup.include"

}

########################################################################
@global py
@py = SIM_get_object("python")
@global phase
@phase = 0

@from text_console_common import wait_for_string

@def fix_memory_spaces_for_Simics3():
    version = SIM_version()
    
    if version[7] == '3':
   #Fix for memory spaces in Simics 3.0.X
      cpulist = SIM_get_all_processors()
      for cpu in cpulist:
       cpu_name = SIM_get_attribute(cpu,"name")
       memory_object = SIM_get_attribute(cpu,"physical_memory")
       memory_name = SIM_get_attribute(memory_object,"name")
       new_memory_object = pre_conf_object(cpu_name + "_mem",'memory-space')
       new_memory_object.map = [[0x0, memory_object, 0, 0, 0xffffffffffffffff]]
       new_memory_object.default_target = [memory_object, 0, 0, memory_object]
       SIM_add_configuration([new_memory_object], None)
       SIM_set_attribute(cpu,"physical_memory", new_memory_object)
       io_object = SIM_get_attribute(cpu,"physical_io")
       io_name = SIM_get_attribute(io_object,"name")
       new_io_object = pre_conf_object(cpu_name + "_io",'memory-space')
       new_io_object.map = [[0x0, io_object, 0, 0, 0xffffffffffffffff]]
       new_io_object.default_target = [io_object, 0, 0, io_object]
       SIM_add_configuration([new_io_object], None)
       SIM_set_attribute(cpu,"physical_io", new_io_object)

@def do_at_prompt():
    global phase, test_app_threads
    fix_memory_spaces_for_Simics3()
    wait_for_string(conf.con0, "#")
    conf.con0.input = "cryptoadm stop\n"
    conf.con0.input = "pkill dhcpagent\n"
    conf.con0.input = "pkill powerd\n"
    conf.con0.input = "svcadm milestone milestone/single-user\n"
    wait_for_string(conf.con0, "bypass):")
    conf.con0.input = "\n"
    conf.con0.input = "sleep 10\n"
    wait_for_string(conf.con0, "#")
    conf.con0.input = "sleep 20\n"
    wait_for_string(conf.con0, "#")
    conf.con0.input = "mount /dev/dsk/c0t1d0s0 /mnt\n"
    conf.con0.input = "cd /mnt/src\n"
    conf.con0.input = "./filter_v9 ../inputs/filter.blur3x3 " + `test_app_threads` + " < ../inputs/calcm.ppm > ../inputs/calcm.out.ppm\n"
    phase = 100
    SIM_break_simulation("")

@def call_back_Warmup(cpu):
    global phase
    phase = 1
    pr("Warmup start call back triggered\n")
    ### change switch cpu time to (1)
    sim_commands.cpu_switch_time_cmd((cli.int_t,1))
    SIM_break_simulation("")

@def call_back_StartParallel(cpu):
    global phase
    phase = 2
    pr("Parallel phase start call back triggered\n")
    SIM_break_simulation("")

@def call_back_EndParallel(cpu):
    global phase
    phase = 3
    pr("Parallel phase end call back triggered\n")
    SIM_break_simulation("")

@def call_back_Iteration(cpu):
    pr("Iteration call back triggered\n")

@def hap_core_simulation_stopped_callback(data, obj, exc, str):
    global phase
    global ckptdir
    if phase == 0:
        print "Who is calling?"
    elif phase == 1:
        phase = 0
        pr("Warmup start call back executed\n")
        py.execute_string = "write-configuration " + ckptdir + "/flexus_test_app_v9/baseline/phase_000/simics/phase_000"
        SIM_quit(0)
    elif phase == 2:
        phase = 0
        pr("Parallel phase start call back executed\n")
        py.execute_string = "write-configuration " + ckptdir + "/flexus_test_app_v9/baseline/phase_000/simics/phase_000"
        SIM_continue(0)
    elif phase == 3:
        phase = 0
        pr("Parallel phase end call back executed\n")
    elif phase == 4:
        phase = 0
        pr("Iteration call back executed\n")
        SIM_continue(0)
    elif phase == 100:
        phase = 0
        pr("Prompt reached\n")
        SIM_continue(0)
    else:
        print "Unknown callback, arg is", arg
        SIM_break_simulation("snore")

@def hap_magic_callback(dummy, cpu, arg):
    if arg == 1:
        call_back_Warmup(cpu)
    elif arg == 2:
        call_back_StartParallel(cpu)
    elif arg == 3:
        call_back_EndParallel(cpu)
    elif arg == 4:
        call_back_Iteration(cpu)
    elif arg == 0x666:
        phase = 0
    elif arg == 0x667:
        phase = 0
    elif arg == 0x668:
        phase = 0
    elif arg == 0x669:
        phase = 0
    elif arg == 0x670:
        phase = 0
    else:
        print "Unknown callback, arg is", arg, ". Ignoring..."

@def Register_Callbacks():
    if simics_version[7] == '2':
        SIM_hap_register_callback("Core_Magic_Instruction", hap_magic_callback, None)
        SIM_hap_register_callback("Core_Simulation_Stopped", hap_core_simulation_stopped_callback, None)
    else: 
        SIM_hap_add_callback("Core_Magic_Instruction", hap_magic_callback, None)
        SIM_hap_add_callback("Core_Simulation_Stopped", hap_core_simulation_stopped_callback, None)


@Register_Callbacks()
@start_branch(do_at_prompt)

run


