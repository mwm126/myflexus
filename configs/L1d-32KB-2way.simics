### L1d
flexus.set "-L1d:bsize"                                        "64" # "Block size" (BlockSize)
flexus.set "-L1d:gzip_flexpoints"                               "1" # "Compress flexpoints with gzip" (GZipFlexpoints)
flexus.set "-L1d:text_flexpoints"                               "0" # "Store flexpoints as text files (compatible with old FastCache component)" (TextFlexpoints)
# NewCache [timing]
flexus.set "-L1d:allow_evict_clean"                             "1" # "Cause the cache to evict clean blocks" (EvictClean)
flexus.set "-L1d:array_config"    "STD:size=32768:assoc=2:repl=LRU" # "Configuration of cache array (STD:sets=1024:assoc=16:repl=LRU" (ArrayConfiguration)
flexus.set "-L1d:banks"                                         "1" # "number of banks on the data and tag arrays" (Banks)
flexus.set "-L1d:bustime_data"                                  "2" # "Bus transfer time - data" (BusTime_Data)
flexus.set "-L1d:bustime_nodata"                                "1" # "Bus transfer time - no data" (BusTime_NoData)
flexus.set "-L1d:cache_type" "InclusiveMESI:snoop_lru=false:AlwaysNAck=true" # "Type of cache (InclusiveMOESI)" (CacheType)
flexus.set "-L1d:cores"                                         "1" # "Number of cores" (Cores)
flexus.set "-L1d:data_issue_lat"                                "1" # "Minimum delay between issues to data pipeline" (DataIssueLatency)
flexus.set "-L1d:data_lat"                                      "2" # "Total latency of data pipeline" (DataLatency)
flexus.set "-L1d:dup_tag_issue_lat"                             "1" # "Minimum delay between issues to tag pipeline" (TagIssueLatency)
flexus.set "-L1d:eb"                                            "8" # "Number of Evict Buffer entries" (EvictBufferSize)
flexus.set "-L1d:evict_on_snoop"                                "0" # "Send evictions on Snoop channel" (EvictOnSnoop)
flexus.set "-L1d:fast_evict_clean"                              "0" # "Send clean evicts without reserving data bus" (FastEvictClean)
flexus.set "-L1d:maf"                                          "32" # "Number of MAF entries" (MAFSize)
flexus.set "-L1d:maf_targets"                                   "0" # "Number of MAF targets per request" (MAFTargetsPerRequest)
flexus.set "-L1d:no_bus"                                        "0" # "No bus model (i.e., infinite BW, no latency)" (NoBus)
flexus.set "-L1d:ports"                                         "2" # "Number of ports on data and tag arrays" (Ports)
flexus.set "-L1d:pre_queue_size"                                "4" # "Size of input arbitration queues" (PreQueueSizes)
flexus.set "-L1d:probe_fetchmiss"                               "0" # "Probe hierarchy on Ifetch miss" (ProbeFetchMiss)
flexus.set "-L1d:queue_size"                                    "8" # "Size of input and output queues" (QueueSizes)
flexus.set "-L1d:snoops"                                        "8" # "Number of Snoop Buffer entries" (SnoopBufferSize)
flexus.set "-L1d:tag_lat"                                       "1" # "Total latency of tag pipeline" (TagLatency)
flexus.set "-L1d:trace_address"                                 "0" # "Address to initiate tracing" (TraceAddress)
flexus.set "-L1d:use_reply_channel"                             "1" # "Separate Reply and Snoop channels on BackSide" (UseReplyChannel)
flexus.set "-L1d:evict_writable_has_data"                       "0" # "Send data with EvictWritable messages" (EvictWritableHasData)
# FastNewRTCache [trace]
flexus.set "-L1d:size"                                      "32768" # "Cache size in bytes" (Size)
flexus.set "-L1d:assoc"                                         "2" # "Set associativity" (Associativity)
flexus.set "-L1d:block_scout"                                   "0" # "Use precise block sharing info" (BlockScout)
flexus.set "-L1d:clean_evict"                                   "1" # "Issue clean evictions" (CleanEvictions)
flexus.set "-L1d:erb_size"                                      "8" # "Evicted Region Buffer size" (ERBSize)
flexus.set "-L1d:mt_width"                                      "1" # "Number of threads sharing this cache" (MTWidth)
flexus.set "-L1d:notify_reads"                                  "0" # "Notify on reads (does not notify on fast-hit)" (NotifyReads)
flexus.set "-L1d:notify_writes"                                 "0" # "Notify on writes" (NotifyWrites)
flexus.set "-L1d:protocol"                          "InclusiveMESI" # "Name of the coherence protocol (InclusiveMOESI)" (Protocol)
flexus.set "-L1d:rsize"                                      "1024" # "Region size in bytes" (RegionSize)
flexus.set "-L1d:rt_assoc"                                     "16" # "RegionTracker Associativity" (RTAssoc)
flexus.set "-L1d:rt_repl"                                     "LRU" # "RegionTracker replacement policy (SetLRU | RegionLRU)" (RTReplPolicy)
flexus.set "-L1d:rt_size"                                    "8192" # "RegionTracker size (number of regions tracked)" (RTSize)
flexus.set "-L1d:skew_block_set"                                "0" # "skew block set indices based on rt way" (SkewBlockSet)
flexus.set "-L1d:std_array"                                     "1" # "Use Standard Tag Array instead of RegionTracker" (StdArray)
flexus.set "-L1d:trace_tracker_on"                              "0" # "Turn trace tracker on/off" (TraceTracker)
flexus.set "-L1d:using_traces"                                  "0" # "References are coming from traces (allow certain inconsistancies" (UsingTraces)
flexus.set "-L1d:downgrade_lru"                                 "0"
flexus.set "-L1d:snoop_lru"                                     "0"
